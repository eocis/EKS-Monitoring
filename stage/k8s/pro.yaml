# Prometheus가 Kubernetes API에 접근할 수 있는 권한을 부여
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  namespace: monitoring
rules:
- apiGroups: [""]
  resources:  # 접근 자원 명시
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"] # Resources에 대한 접근 Action 설정
- apiGroups: [""]
  resources:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"] # 스크래핑시 사용되는 URL
  verbs: ["get"]
---
# 생성된 ClusterRole을 monitoring NS의 Service Account와 연동
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: default
  namespace: monitoring
---
# Prometheus ConfigMap 설정
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-server-conf
  labels:
    name: prometheus-server-conf
  namespace: monitoring
data:
  prometheus.rules: |-  # 수집 지표에 대한 알람 조건 지정 및 AlertManager로 알람 전송
    groups:
    - name: Status Alert(Pod)
      rules:
      - alert: Pod Status
        expr: avg(kube_pod_container_status_ready{namespace!="default"} and kube_pod_container_status_ready{namespace!="kube-system"} and kube_pod_container_status_ready{namespace!="kube-public"} and kube_pod_container_status_ready{namespace!="monitoring"}) < 1
        for: 1m
        labels:
          severity: 'critical'
        annotations:
          summary: "Pod Dead"
          description: "Pod Dead"
  prometheus.yml: |-  # 수집할 Metric의 종류와 수집 주기 정의
    global:
      scrape_interval: 5s # 스크래핑 주기
      scrape_timeout: 5s # 스크래핑 요청 초과시간(=<scrape_interval)
      evaluation_interval: 5s # 규칙 평가 빈도
    rule_files:
      - /etc/prometheus/prometheus.rules  # rule_file은 glob 목록을 지정하며 규칙 및 경고를 읽습니다.

    alerting:   # Alert 설정
      alertmanagers:
      - scheme: http
        static_configs:
          - targets:
            - "alertmanager.monitoring.svc:9093"

    scrape_configs:

      - job_name: 'kubernetes-apiservers' # NS, Service, EndPoint Port 스크랩

        scheme: https

        kubernetes_sd_configs: # 서비스 검색 구성 목록
        - role: endpoints   # 서비스의 Endpoint대상을 검색, Endpoint에 대해 포트당 하나의 대상이 검색, Endpoint에 바인딩 되지 않은 포드의 모든 추가 컨테이너 포드도 발견

        tls_config: # TLS 서비스를 사용
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt # Kubernetes Certification 지정
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https   # 정규식
      
      - job_name: 'kubernetes-nodes'  # Node 이름 기반 label 스크랩

        scheme: https

        kubernetes_sd_configs:
        - role: node

        relabel_configs:
        - action: labelmap  # 레이블 이름과 일치 시킨 후 레이블의 값을 복사하여 해당 값으로 대체된 일치 그룹참조
          regex: __meta_kubernetes_node_label_(.+)  # 노드 레이블
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics

      - job_name: 'kubernetes_pods' # Kubernetes SD구성을 사용하여 Kubernetes의 RESET API에서 대상을 검색하고 항상 클러스터 상태와 동기화 상태를 유지

        kubernetes_sd_configs:
        - role: pod   # 모든 포드를 발견하고 컨테이너를 대상으로 노출

        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

      - job_name: 'kubernetes-cadvisor' # 각 노드에 있는 cadvisor데이터 스크래핑

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
        - role: node

        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
      
      - job_name: 'kubernetes-serivce-endpoints'

        kubernetes_sd_configs:
        - role: endpoints

        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name

---
# Prometheus Deployment 설정
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-deployment
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-server
  template:
    metadata:
      labels:
        app: prometheus-server
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus/"  # Prometheus가 DB를 작성하는 위치 (Default: data/)
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/
            - name: prometheus-storage-volume
              mountPath: /prometheus/
      volumes:
        - name: prometheus-config-volume
          configMap:
            defaultMode: 420
            name: prometheus-server-conf
        - name: prometheus-storage-volume # Prometheus DB를 emptyDir로 설정
          emptyDir: {}
---
# Kube State Metrics(ClusterRole)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-state-metrics
rules:
- apiGroups:  # Cluster 구성
  - ""
  resources: ["configmaps", "secrets", "nodes", "pods", "services", "resourcequotas", "replicationcontrollers", "limitranges", "persistentvolumeclaims", "persistentvolumes", "namespaces", "endpoints"]
  verbs: ["list", "watch"]
- apiGroups:  # Pod 구성(extensions)
  - extensions
  resources: ["daemonsets", "deployments", "replicasets", "ingresses"]
  verbs: ["list", "watch"]
- apiGroups:  # Pod 구성
  resources: ["statefulsets", "daemonsets", "deployments", "replicasets"]
  verbs: ["list", "watch"]
- apiGroups:  # Job 구성
  - batch
  resources: ["cronjobs", "jobs"]
  verbs: ["list", "watch"]
- apiGroups:  # Scale 구성
  - autoscaling
  resources: ["horizontalpodautoscalers"]
  verbs: ["list", "watch"]
- apiGroups:  # Token 생성(Auth)
  - authentication.k8s.io
  resources: ["tokenreviews"]
  verbs: ["create"]
- apiGroups:  # Subject 생성(Auth)
  - authorization.k8s.io
  resources: ["subjectaccessreviews"]
  verbs: ["create"]
- apiGroups: # Pod 정책
  - policy
  resources: ["poddisruptionbudgets"]
  verbs: ["list", "watch"]
- apiGroups:  # Auth 인증 요청 내역
  - certificates.k8s.io
  resources: ["certificatesigningrequests"]
  verbs: ["list", "watch"]
- apiGroups:  # Storage 확인
  - storage.k8s.io
  resources: ["storageclasses", "volumeattachments"]
  verbs: ["list", "watch"]
- apiGroups:  # API 인증, Webhook 요청 및 응답 내역 확인
  - admissionregistration.k8s.io
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list", "watch"]
- apiGroups:  # 네트워크 확인
  - networking.k8s.io
  resources: ["networkpolicies"]
  verbs: ["list", "watch"]
---
# Kube State Metrics(Service Account)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-state-metrics
  namespace: kube-system
---
# Kube State Metrics(RoleBinding)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-state-metrics
subjects:
- kind: ServiceAccount
  name: kube-state-metrics
  namespace: kube-system
---
# Kube State Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kube-state-metrics
  name: kube-state-metrics
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kube-state-metrics
  template:
    metadata:
      labels:
        app: kube-state-metrics
    spec:
      containers:
      - image: quay.io/coreos/kube-state-metrics
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
        name: kube-state-metrics
        ports:
        - containerPort: 8080
          name: http-metrics
        - containerPort: 8081
          name: telemetry
        readinessProbe:
          httpGet:
            path: /
            port: 8081
          initialDelaySeconds: 5
          timeoutSeconds: 5
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: kube-state-metrics
---
# Kube State Metrics(Service)
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kube-state-metrics
  name: kube-state-metrics
  namespace: kube-system
spec:
  clusterIP: None
  ports:
  - name: http-metrics
    port: 8080
    targetPort: http-metrics
  - name: telemetry
    port: 8081
    targetPort: telemetry
  selector:
    app: kube-state-metrics
---
# Node Exporter Daemonset
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  namespace: monitoring
  labels:
    k8s-app: node-exporter
spec:
  selector:
    matchLabels:
      k8s-app: node-exporter
  template:
    metadata:
      labels:
        k8s-app: node-exporter
    spec:
      containers:
      - image: prom/node-exporter
        name: node-exporter
        ports:
        - containerPort: 9100
          protocol: TCP
          name: http
# ---
# # Node Exporter Service(NodePort)
# apiVersion: v1
# kind: Service
# metadata:
#   labels:
#     k8s-app: node-exporter
#   name: node-exporter
#   namespace: kube-system
# spec:
#   ports:
#   - name: http
#     port: 9100
#     nodePort: 31672
#     protocol: TCP
#   type: NodePort
#   selector:
#     k8s-app: node-exporter
---
# Prometheus Service(NordPort)
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: monitoring
  annotations:
    prometheus.io/scrape: 'true'  # 스크래핑 설정
    prometheus.io/port: '9090'  # 포트 지정
spec:
  selector:
    app: prometheus-server
  type: NodePort
  ports:
    - port: 8080  # 8080 포트로 ClusterIP설정
      targetPort: 9090