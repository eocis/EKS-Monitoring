# Prometheus가 Kubernetes API에 접근할 수 있는 권한을 부여
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  namespace: monitoring
rules:
- apiGroups: [""]
  resources:  # 접근 자원 명시
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"] # Resources에 대한 접근 Action 설정
- apiGroups: [""]
  resources:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"] # 스크래핑시 사용되는 URL
  verbs: ["get"]
---
# 생성된 ClusterRole을 monitoring NS의 Service Account와 연동
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: default
  namespace: monitoring
---
# Prometheus ConfigMap 설정
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-server-conf
  labels:
    name: prometheus-server-conf
  namespace: monitoring
data:
  prometheus.rules: |-  # 수집 지표에 대한 알람 조건 지정 및 AlertManager로 알람 전송
    groups:
    - name: Node Status Alert
      rules:
      - alert: Node Status Alert!
        expr: kube_node_status_condition{condition="Ready",status="false"} == 1 or kube_node_status_condition{condition="Ready",status="unknown"} == 1
        for: 1s
        labels:
          serverity: critical
          record: 
        annotations:
          title: '[{{ $labels.serverity }}]Node Status Alert!'
          text: |

            Node = {{$labels.node}}
            Status = {{$labels.satus}}
    - name: Pod Terminate Alert!
      rules:
      - alert: Pod Terminate Alert!
        expr: kube_pod_container_status_terminated{pod=~"web-app(.+)"} == 1
        for: 1s
        labels:
          serverity: critical
          instance: 
        annotations:
          title: |
            '(web-app)Pod Terminated Alert!'

          text: |

            Time: {{ with query "time()" }}{{ . | first | value | humanizeTimestamp }}{{ end }}
            Container = {{ $labels.container }}
            Pod = {{ $labels.pod }}
            Namespace = {{ $labels.namespace }}
  prometheus.yml: |-  # 수집할 Metric의 종류와 수집 주기 정의, (PrometheusRule 커스텀 리소스를 사용해도 되지만 정적 파일 수정)
    global:
      scrape_interval: 1s # 스크래핑 주기
      scrape_timeout: 1s # 스크래핑 요청 초과시간(=<scrape_interval)
      evaluation_interval: 1s # 규칙 평가 빈도
    rule_files: # 규칙을 로딩하고 evaluation_interval 설정에 따라 정기적으로 평가함
      - /etc/prometheus/prometheus.rules  # rule_file은 glob 목록을 지정하며 규칙 및 경고를 읽습니다.
    alerting:   # Alert 설정
      alertmanagers:
      - scheme: http
        static_configs:
          - targets: ["prometheus-alert-service.monitoring.svc:9093"] # Alertmanager

    scrape_configs:

      - job_name: 'kubernetes-apiservers' # NS, Service, EndPoint Port 스크랩

        scheme: https

        kubernetes_sd_configs: # 서비스 검색 구성 목록
        - role: endpoints   # 서비스의 Endpoint대상을 검색, Endpoint에 대해 포트당 하나의 대상이 검색, Endpoint에 바인딩 되지 않은 포드의 모든 추가 컨테이너 포드도 발견

        tls_config: # TLS 서비스를 사용
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt # Kubernetes Certification 지정
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https   # 정규식
      
      - job_name: 'kubernetes-nodes'  # Node 이름 기반 label 스크랩

        scheme: https

        kubernetes_sd_configs:
        - role: node

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        relabel_configs:
        - action: labelmap  # 레이블 이름과 일치 시킨 후 레이블의 값을 복사하여 해당 값으로 대체된 일치 그룹참조
          regex: __meta_kubernetes_node_label_(.+)  # 노드 레이블
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics

      - job_name: 'kubernetes_pods' # Kubernetes SD구성을 사용하여 Kubernetes의 RESET API에서 대상을 검색하고 항상 클러스터 상태와 동기화 상태를 유지

        kubernetes_sd_configs:
        - role: pod   # 모든 포드를 발견하고 컨테이너를 대상으로 노출

        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name
        - source_labels: [__meta_kubernetes_pod_node_name] # 해당 Pod의 Node 확인
          action: replace
          target_label: kubernetes_pod_node_name

      - job_name: 'kubernetes-cadvisor' # 각 노드에 있는 cadvisor데이터 스크래핑

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
        - role: node

        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
      
      - job_name: 'kubernetes-serivce-endpoints'

        kubernetes_sd_configs:
        - role: endpoints

        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name
      
      # - job_name: 'kube-state-metrics'  # kube-state-metrics 스크래핑
      #   static_configs:
      #     - targets: ['kube-state-metrics.kube-system.svc.cluster.local:8080']
      
      - job_name: 'kubernetes-node-exporter'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_endpoints_name]
          regex: 'node-exporter'
          action: keep
---
# Prometheus AlertManager ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-alert-conf
  namespace: monitoring
data:
  # template.tmpl: |-
  #   {{ define "custom_slack_title"}}
  #     Container {{ .Annotations.container }} Dead
  #   {{ end }}
  #   {{ define "custom_slack_message"}}
  #     *Serverity: * {{ .Annotations.serverity }}
  #     *NS: * {{ .Annotations.namespace }}
  #     *Container: * {{ .Annotations.container }}
  #     *Pod: * {{ .Annotations.pod }}
  #     *Description: * {{ .Annotations.description }}
  #   {{ end }}
  alertset.yml: |-
    global:
      slack_api_url: "https://hooks.slack.com/services/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"
    route:
      group_by: [alertname]
      group_wait: 1s
      # repeat_interval: 1d  # 알람 전송 후 재전송 까지의 시간
      receiver: slack-alert # 전송 대상 설정
    receivers:
    - name: 'slack-alert'
      slack_configs:
      - send_resolved: false  # 해결된 경고의 알림
        channel: '#prometheus'
        username: 'Prometheus'
        title: "{{ range .Alerts }}{{ .Annotations.title }}{{ end }}"
        text: "{{ range .Alerts }}{{ .Annotations.text }}{{ end }}"
        # title: '{{ template "custom_slack_title" }}'
        # text: '{{ template "custom_slack_message"}}'
    # templates: ['/data/alertmanager/template.tmpl']
---
# Prometheus Deployment 설정
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-deployment
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-server
  template:
    metadata:
      labels:
        app: prometheus-server
    spec:
      containers:
        # Prometheus Server
        - name: prometheus
          image: prom/prometheus
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus/"  # Prometheus가 DB를 작성하는 위치 (Default: data/)
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/
            - name: prometheus-storage-volume
              mountPath: /prometheus/
        # Prometheus Alert
        - name: prometheus-alert
          ports:
            - containerPort: 9093
          image: prom/alertmanager
          args:
            - "--config.file=/data/alertmanager/alertset.yml"
          volumeMounts:
            - name: prometheus-alert-config-volume
              mountPath: /data/alertmanager
      volumes:
        # Prometheus-server-config
        - name: prometheus-config-volume
          configMap:
            defaultMode: 420
            name: prometheus-server-conf
        # Prometheus-DB
        - name: prometheus-storage-volume # Prometheus DB를 emptyDir로 설정
          emptyDir: {}
        # Prometheus-alert-config
        - name: prometheus-alert-config-volume
          configMap:
            defaultMode: 420
            name: prometheus-alert-conf
---
# Kube State Metrics(ClusterRole)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-state-metrics
rules:
- apiGroups:  # Cluster 구성
  - ""
  resources: ["configmaps", "secrets", "nodes", "pods", "services", "resourcequotas", "replicationcontrollers", "limitranges", "persistentvolumeclaims", "persistentvolumes", "namespaces", "endpoints"]
  verbs: ["list", "watch"]
- apiGroups:  # Pod 구성(extensions)
  - extensions
  resources: ["daemonsets", "deployments", "replicasets", "ingresses"]
  verbs: ["list", "watch"]
- apiGroups:  # Pod 구성
  - apps
  resources: ["statefulsets", "daemonsets", "deployments", "replicasets"]
  verbs: ["list", "watch"]
- apiGroups:  # Job 구성
  - batch
  resources: ["cronjobs", "jobs"]
  verbs: ["list", "watch"]
- apiGroups:  # Scale 구성
  - autoscaling
  resources: ["horizontalpodautoscalers"]
  verbs: ["list", "watch"]
- apiGroups:  # Token 생성(Auth)
  - authentication.k8s.io
  resources: ["tokenreviews"]
  verbs: ["create"]
- apiGroups:  # Subject 생성(Auth)
  - authorization.k8s.io
  resources: ["subjectaccessreviews"]
  verbs: ["create"]
- apiGroups: # Pod 정책
  - policy
  resources: ["poddisruptionbudgets"]
  verbs: ["list", "watch"]
- apiGroups:  # Auth 인증 요청 내역
  - certificates.k8s.io
  resources: ["certificatesigningrequests"]
  verbs: ["list", "watch"]
- apiGroups:  # Storage 확인
  - storage.k8s.io
  resources: ["storageclasses", "volumeattachments"]
  verbs: ["list", "watch"]
- apiGroups:  # API 인증, Webhook 요청 및 응답 내역 확인
  - admissionregistration.k8s.io
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list", "watch"]
- apiGroups:  # 네트워크 확인
  - networking.k8s.io
  resources: ["networkpolicies"]
  verbs: ["list", "watch"]
---
# Kube State Metrics(Service Account)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-state-metrics
  namespace: kube-system
---
# Kube State Metrics(RoleBinding)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-state-metrics
subjects:
- kind: ServiceAccount
  name: kube-state-metrics
  namespace: kube-system
---
# Kube State Deployment
# 워커노드의 CPU, MEM, DISK 및 클러스터 내부의 Pod가 사용중인 리소스 매트릭 및 구성 내역 등 수집하는 기능
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kube-state-metrics
  name: kube-state-metrics
  namespace: kube-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app: kube-state-metrics
  template:
    metadata:
      labels:
        app: kube-state-metrics
    spec:
      containers:
      - image: quay.io/coreos/kube-state-metrics
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
        name: kube-state-metrics
        ports:
        - containerPort: 8080
          name: http-metrics
        - containerPort: 8081
          name: telemetry
        readinessProbe:
          httpGet:
            path: /
            port: 8081
          initialDelaySeconds: 5
          timeoutSeconds: 5
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: kube-state-metrics
---
# Kube State Metrics(Service)
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kube-state-metrics
  name: kube-state-metrics
  namespace: kube-system
spec:
  clusterIP: None
  ports:
  - name: http-metrics
    port: 8080
    targetPort: http-metrics
  - name: telemetry
    port: 8081
    targetPort: telemetry
  selector:
    app: kube-state-metrics
---
# Node Exporter Daemonset
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  namespace: monitoring
  labels:
    k8s-app: node-exporter
spec:
  selector:
    matchLabels:
      k8s-app: node-exporter
  template:
    metadata:
      labels:
        k8s-app: node-exporter
    spec:
      containers:
      - image: prom/node-exporter
        name: node-exporter
        ports:
        - containerPort: 9100
          protocol: TCP
          name: http
---
# Node Exporter Service(ClusterIP)
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: node-exporter
  name: node-exporter
  namespace: kube-system
spec:
  ports:
  - name: http
    port: 9100
    protocol: TCP
  type: NodePort
  selector:
    k8s-app: node-exporter
---
# Prometheus Service(NordPort)
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: monitoring
  annotations:
    prometheus.io/scrape: 'true'  # 스크래핑 설정
    prometheus.io/port: '9090'  # 포트 지정
spec:
  selector:
    app: prometheus-server
  type: NodePort
  ports:
    - port: 8080  # 8080 포트로 설정
      targetPort: 9090
---
# Prometheus Alert Service(NodePort)
apiVersion: v1
kind: Service
metadata:
  name: prometheus-alert-service
  namespace: monitoring
spec:
  selector:
    app: prometheus-server
  type: NodePort
  ports:
    - port: 9093
      targetPort: 9093
